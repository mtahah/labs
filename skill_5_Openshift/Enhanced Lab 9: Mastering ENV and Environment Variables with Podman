# 🚀 Enhanced Lab 9: Mastering ENV and Environment Variables with Podman

## 📚 **LEARNING OBJECTIVES**
By the end of this comprehensive lab, you will be able to:
* 🎯 Define and manage environment variables in Containerfiles with precision
* ⚡ Override environment variables dynamically at runtime using `podman run -e`
* 📝 Implement and troubleshoot multi-line environment variables
* 📖 Create professional documentation for environment variable configurations
* 🔍 Debug and verify environment variable behavior in containers
* 🏗️ Apply production-ready patterns for configuration management

---

## 🛠️ **PREREQUISITES & SYSTEM VERIFICATION**

### ✅ **Environment Readiness Check**

**💡 What this does:** Verifies your system has all required components before starting the lab.

```bash
# Check Podman installation and version
podman --version
```
**Expected output:**
```
podman version 3.4.0 (or higher)
```

**🔧 Troubleshooting:** If command fails, install Podman:
```bash
sudo apt update && sudo apt install podman  # Ubuntu/Debian
# OR
sudo dnf install podman  # Fedora/RHEL
```

```bash
# Verify system resources
df -h /tmp
free -h
```
**💡 What this checks:** Available disk space and memory for container operations.

```bash
# Test basic Podman functionality
podman info --format json | grep -E "(version|store)"
```
**💡 What this reveals:** Podman configuration and storage backend information.

### 🏁 **Workspace Preparation**

```bash
# Create organized workspace with clear structure
mkdir -p ~/podman-labs/lab9-env-variables
cd ~/podman-labs/lab9-env-variables
pwd
```
**✅ Verification:** Should show `/home/[username]/podman-labs/lab9-env-variables`

```bash
# Verify write permissions
touch test-file && rm test-file && echo "✅ Directory permissions OK"
```

---

## 🎯 **TASK 1: Mastering Basic ENV Configuration**

### 📍 **Checkpoint 1.1: Creating Your First Environment-Aware Container**

**🎓 Learning Goal:** Understand how ENV instructions work in Containerfiles and how containers inherit these variables.

**💡 Behind the scenes:** ENV instructions in Containerfiles create environment variables that persist in the container's runtime environment, similar to export commands in shell scripts.

```bash
# Create your first Containerfile with environment variables
nano Containerfile
```

**📝 Nano Editor Instructions:**
- Type the content below
- Save: `Ctrl+X`, then `Y`, then `Enter`
- **💡 Pro tip:** Use `Ctrl+K` to cut entire lines, `Ctrl+U` to paste

**Add this content:**
```dockerfile
# Base image selection
FROM alpine:latest

# 📝 Define environment variables using backslash continuation
# This creates variables available throughout container lifecycle
ENV APP_NAME="MyApp" \
    APP_VERSION="1.0.0" \
    APP_ENVIRONMENT="development"

# Command that uses environment variables
CMD echo "🚀 Running $APP_NAME version $APP_VERSION in $APP_ENVIRONMENT mode"
```

**🔍 Understanding the Dockerfile:**
- `ENV APP_NAME="MyApp" \` - Creates APP_NAME variable with value "MyApp"
- Backslash (`\`) continues the ENV instruction on next line
- Variables are accessible via `$VARIABLE_NAME` syntax in commands

### 📍 **Checkpoint 1.2: Building and Testing Your Container**

```bash
# Build the container image with detailed output
podman build -t env-demo . --no-cache
```

**💡 What `--no-cache` does:** Forces rebuild from scratch, ensuring all instructions execute fresh.

**✅ Expected build output:**
```
STEP 1/3: FROM alpine:latest
STEP 2/3: ENV APP_NAME="MyApp"     APP_VERSION="1.0.0"     APP_ENVIRONMENT="development"
--> Using cache [cache-id]
STEP 3/3: CMD echo "🚀 Running $APP_NAME version $APP_VERSION in $APP_ENVIRONMENT mode"
COMMIT env-demo
--> [image-id]
Successfully tagged localhost/env-demo:latest
```

```bash
# Run your container and observe environment variable usage
podman run env-demo
```

**✅ Expected output:**
```
🚀 Running MyApp version 1.0.0 in development mode
```

### 🧪 **Interactive Verification Test 1.1**

```bash
# Inspect the image to verify environment variables are set
podman inspect env-demo --format '{{.Config.Env}}'
```

**🔍 What to look for:** You should see your environment variables listed in the output.

```bash
# Test variable accessibility in interactive session
podman run -it env-demo sh
```

**Inside the container, run:**
```bash
# List all environment variables
env | grep APP_
echo "App Name: $APP_NAME"
echo "Version: $APP_VERSION"
echo "Environment: $APP_ENVIRONMENT"
exit
```

**✅ Success Criteria:** All three variables should display correctly.

---

## 🎯 **TASK 2: Dynamic Runtime Environment Override**

### 📍 **Checkpoint 2.1: Single Variable Override**

**🎓 Learning Goal:** Master runtime environment variable override, essential for configuration flexibility in production.

**💡 Real-world application:** This pattern allows the same container image to run in development, staging, and production with different configurations.

```bash
# Override APP_NAME at runtime
podman run -e APP_NAME="ProductionApp" env-demo
```

**✅ Expected output:**
```
🚀 Running ProductionApp version 1.0.0 in development mode
```

**🔍 Analysis:** Notice only APP_NAME changed; other variables retained their default values.

### 📍 **Checkpoint 2.2: Multiple Variable Override**

```bash
# Override multiple variables simultaneously
podman run -e APP_NAME="StagingApp" -e APP_VERSION="2.1.0" -e APP_ENVIRONMENT="staging" env-demo
```

**✅ Expected output:**
```
🚀 Running StagingApp version 2.1.0 in staging mode
```

### 🧪 **Interactive Verification Test 2.1**

```bash
# Create environment file for complex configurations
nano app.env
```

**Add this content:**
```bash
APP_NAME=FileConfiguredApp
APP_VERSION=3.0.0
APP_ENVIRONMENT=production
DATABASE_URL=postgresql://prod-server:5432/myapp
API_KEY=prod-key-12345
```

```bash
# Use environment file with container
podman run --env-file app.env env-demo
```

**💡 Why use env files:** Manages complex configurations and keeps sensitive data out of command history.

### 📊 **Before/After Comparison Demonstration**

```bash
# Compare default vs overridden behavior
echo "=== DEFAULT BEHAVIOR ===" && podman run env-demo
echo "=== RUNTIME OVERRIDE ===" && podman run -e APP_ENVIRONMENT="production" env-demo
echo "=== FILE-BASED CONFIG ===" && podman run --env-file app.env env-demo
```

---

## 🎯 **TASK 3: Advanced Multi-line Environment Variables**

### 📍 **Checkpoint 3.1: Creating Complex Multi-line Variables**

**🎓 Learning Goal:** Handle complex configuration strings and multi-line content in environment variables.

```bash
# Create advanced Containerfile with multi-line variables
nano Containerfile-advanced
```

**Add this content:**
```dockerfile
FROM alpine:latest

# Multi-line environment variables for complex configurations
ENV APP_NAME="AdvancedApp" \
    APP_VERSION="2.0.0" \
    APP_DESCRIPTION="This is a sophisticated application \
that handles multiple tasks including \
data processing, API integration, and \
real-time monitoring capabilities" \
    DATABASE_CONFIG="host=localhost port=5432 \
dbname=myapp user=appuser \
sslmode=require" \
    FEATURE_FLAGS="feature_a=true,feature_b=false,\
feature_c=experimental"

# Install required packages for demonstration
RUN apk add --no-cache curl jq

# Command to display all configuration
CMD echo "📱 Application: $APP_NAME v$APP_VERSION" && \
    echo "📝 Description: $APP_DESCRIPTION" && \
    echo "🗄️ Database Config: $DATABASE_CONFIG" && \
    echo "🚩 Feature Flags: $FEATURE_FLAGS"
```

```bash
# Build the advanced container
podman build -f Containerfile-advanced -t multiline-env . --no-cache
```

### 📍 **Checkpoint 3.2: Testing Multi-line Variables**

```bash
# Run and observe multi-line variable output
podman run multiline-env
```

**✅ Expected output:**
```
📱 Application: AdvancedApp v2.0.0
📝 Description: This is a sophisticated application that handles multiple tasks including data processing, API integration, and real-time monitoring capabilities
🗄️ Database Config: host=localhost port=5432 dbname=myapp user=appuser sslmode=require
🚩 Feature Flags: feature_a=true,feature_b=false,feature_c=experimental
```

### 🧪 **Interactive Verification Test 3.1**

```bash
# Test multi-line variable parsing in interactive mode
podman run -it multiline-env sh
```

**Inside container:**
```bash
# Verify each variable individually
echo "=== APP DESCRIPTION ==="
echo "$APP_DESCRIPTION"
echo ""
echo "=== DATABASE CONFIG ==="
echo "$DATABASE_CONFIG"
echo ""
echo "=== FEATURE FLAGS ==="
echo "$FEATURE_FLAGS" | tr ',' '\n'
exit
```

---

## 🎯 **TASK 4: Professional Documentation & Best Practices**

### 📍 **Checkpoint 4.1: Creating Comprehensive Documentation**

**🎓 Learning Goal:** Document environment variables professionally for team collaboration and maintenance.

```bash
# Create comprehensive documentation
nano README.md
```

**Add this professional documentation:**
```markdown
# 🚀 Environment Variables Documentation

## Overview
This container supports flexible configuration through environment variables, enabling deployment across multiple environments without rebuilding images.

## 📋 Environment Variables Reference

### Core Application Variables

| Variable | Type | Description | Default Value | Required | Example |
|----------|------|-------------|---------------|----------|---------|
| `APP_NAME` | String | Application display name | `MyApp` | No | `ProductionApp` |
| `APP_VERSION` | String | Application version identifier | `1.0.0` | No | `2.1.0` |
| `APP_ENVIRONMENT` | String | Deployment environment | `development` | No | `production` |

### Advanced Configuration Variables

| Variable | Type | Description | Default Value | Required | Example |
|----------|------|-------------|---------------|----------|---------|
| `APP_DESCRIPTION` | Multi-line String | Detailed application description | See Containerfile | No | Custom description |
| `DATABASE_CONFIG` | Connection String | Database connection parameters | See Containerfile | No | `host=prod-db port=5432...` |
| `FEATURE_FLAGS` | CSV String | Feature toggle configuration | See Containerfile | No | `feature_a=true,feature_b=false` |

## 🚀 Quick Start Examples

### Development Environment
```bash
podman run -e APP_ENVIRONMENT="development" your-image:latest
```

### Production Environment
```bash
podman run \
  -e APP_NAME="ProductionApp" \
  -e APP_VERSION="2.0.0" \
  -e APP_ENVIRONMENT="production" \
  your-image:latest
```

### Using Environment File
```bash
# Create production.env file
echo 'APP_NAME=ProductionApp
APP_VERSION=2.0.0
APP_ENVIRONMENT=production' > production.env

# Run with environment file
podman run --env-file production.env your-image:latest
```

## 🔧 Troubleshooting

### Variable Not Updating
- Verify `-e` flag placement before each variable
- Check for typos in variable names
- Ensure no spaces around equals sign in env files

### Multi-line Variable Issues
- Verify backslash (`\`) placement at line ends
- Check for proper escaping of special characters
- Use double quotes for complex strings

### Debug Commands
```bash
# Inspect environment variables in built image
podman inspect image-name --format '{{.Config.Env}}'

# Check variables in running container
podman exec container-name env | sort
```
```

### 📍 **Checkpoint 4.2: Environment Variable Security Best Practices**

```bash
# Create security guidelines document
nano SECURITY.md
```

**Add security documentation:**
```markdown
# 🔐 Environment Variable Security Guidelines

## ⚠️ Security Best Practices

### 1. Sensitive Data Handling
- **NEVER** put passwords, API keys, or secrets in Containerfiles
- Use container runtime secrets or external secret management
- Implement proper secret rotation policies

### 2. Production Recommendations
```bash
# ❌ WRONG: Secrets in command line (visible in process list)
podman run -e DATABASE_PASSWORD="secret123" app

# ✅ CORRECT: Use secrets or env files with restricted permissions
chmod 600 secrets.env
podman run --env-file secrets.env app
```

### 3. Environment Separation
- Use different env files for different environments
- Implement proper access controls on configuration files
- Audit environment variable usage regularly

## 🔍 Security Verification Commands
```bash
# Check file permissions on env files
ls -la *.env

# Verify no secrets in image layers
podman history image-name --no-trunc
```
```

---

## 🧪 **COMPREHENSIVE UNDERSTANDING VERIFICATION**

### 🎯 **Practical Skills Assessment**

**Test 1: Environment Variable Mastery**
```bash
# Create a container that demonstrates all learned concepts
nano Containerfile-assessment
```

**Your challenge - create a Containerfile with:**
1. At least 5 environment variables
2. Multi-line variable with proper formatting
3. Default values that make sense
4. Clear variable usage in CMD

**Test 2: Runtime Override Challenge**
```bash
# Build your assessment container
podman build -f Containerfile-assessment -t env-assessment .

# Test these scenarios:
echo "=== Test 1: Default behavior ==="
podman run env-assessment

echo "=== Test 2: Single override ==="
podman run -e [PICK_A_VARIABLE]="NewValue" env-assessment

echo "=== Test 3: Multiple overrides ==="
podman run -e VAR1="value1" -e VAR2="value2" env-assessment
```

**✅ Success Criteria:**
- All tests run without errors
- Variables display expected values
- Overrides work correctly

---

## 🛠️ **TROUBLESHOOTING TOOLKIT**

### 🔍 **Diagnostic Commands**

```bash
# Environment Variable Debugging Checklist

# 1. Verify image environment variables
echo "=== Image Environment Variables ==="
podman inspect env-demo --format '{{range .Config.Env}}{{println .}}{{end}}'

# 2. Check running container environment
echo "=== Runtime Environment Check ==="
podman run env-demo env | sort

# 3. Compare image vs runtime environment
echo "=== Environment Comparison ==="
podman run -e TEST_VAR="runtime-value" env-demo sh -c 'env | grep -E "(APP_|TEST_)"'

# 4. Verify multi-line variable integrity
echo "=== Multi-line Variable Test ==="
podman run multiline-env sh -c 'echo "$APP_DESCRIPTION" | wc -l'
```

### ⚡ **Common Issues & Solutions**

**Problem:** Environment variables not updating
```bash
# Solution: Check command syntax
podman run -e "VAR=value" image    # ✅ Correct
podman run -e VAR="value" image    # ✅ Also correct
podman run -eVAR=value image       # ❌ Wrong syntax
```

**Problem:** Multi-line variables broken
```bash
# Debug: Check for proper line continuation
podman run image sh -c 'echo "$VARIABLE" | cat -A'
# Look for proper line endings and escaped characters
```

---

## 🏁 **CLEANUP & FINAL VERIFICATION**

### 🧹 **Workspace Cleanup**

```bash
# Clean up containers and images
podman rm -f $(podman ps -aq) 2>/dev/null || echo "No containers to remove"
podman rmi env-demo multiline-env env-assessment 2>/dev/null || echo "Images cleaned"

# Organize your work
ls -la ~/podman-labs/lab9-env-variables/
```

### ✅ **Final Skills Verification**

```bash
# Quick competency check
echo "🎯 Environment Variable Skills Verification"
echo "1. Can you explain what ENV does in a Containerfile? (Yes/No)"
echo "2. Can you override variables at runtime? (Yes/No)"
echo "3. Can you create multi-line variables? (Yes/No)"
echo "4. Do you know security best practices? (Yes/No)"
echo ""
echo "If you answered 'Yes' to all questions, congratulations! 🎉"
```

---

## 📚 **QUICK REFERENCE CARD**

### 🚀 **Essential Commands**
```bash
# Build with environment variables
podman build -t image-name .

# Run with single variable override
podman run -e VAR_NAME="value" image-name

# Run with multiple overrides
podman run -e VAR1="val1" -e VAR2="val2" image-name

# Use environment file
podman run --env-file env-file.env image-name

# Inspect environment variables
podman inspect image-name --format '{{.Config.Env}}'

# Debug environment in running container
podman exec container-name env | sort
```

### 📝 **Containerfile ENV Patterns**
```dockerfile
# Single variable
ENV APP_NAME="MyApp"

# Multiple variables (preferred)
ENV APP_NAME="MyApp" \
    APP_VERSION="1.0.0" \
    DEBUG_MODE="false"

# Multi-line variable
ENV DESCRIPTION="This is a long \
description that spans \
multiple lines"
```

---

## 🚀 **NEXT STEPS & ADVANCED TOPICS**

### 🎯 **Continue Your Learning Journey**

1. **🔐 Advanced Secret Management**
   - Podman secrets integration
   - External secret providers (Vault, etc.)
   - Kubernetes ConfigMaps and Secrets

2. **⚙️ Configuration Management Patterns**
   - 12-factor app methodology
   - Configuration injection patterns
   - Template-based configuration

3. **🏭 Production Deployment**
   - Environment-specific image variants
   - Blue-green deployment strategies
   - Configuration drift detection

### 📖 **Recommended Reading**
- [Podman Environment Variables Documentation](https://docs.podman.io/en/latest/)
- [12-Factor App Configuration](https://12factor.net/config)
- [Container Security Best Practices](https://docs.docker.com/develop/security-best-practices/)

---

## 📝 **LAB COMPLETION SUMMARY**

### 🎉 **Congratulations! You've Successfully Completed:**

✅ **Core Objectives Mastered:**
- ✅ Define environment variables in Containerfiles using ENV instruction
- ✅ Override environment variables at runtime using `podman run -e`
- ✅ Implement multi-line environment variables with proper syntax
- ✅ Document environment variables professionally for team use

✅ **Advanced Skills Developed:**
- ✅ Security best practices for sensitive configuration data
- ✅ Environment file usage for complex configurations
- ✅ Debugging and troubleshooting environment variable issues
- ✅ Production-ready documentation and workflow patterns

✅ **Real-world Applications:**
- Configuration management across environments
- Secure secret handling patterns
- Team collaboration through clear documentation
- Debugging and maintenance workflows

### 🚀 **Your Next Challenge**
Apply these environment variable skills to a real project by containerizing an application that requires different configurations for development, staging, and production environments.

**Total Lab Time:** ~45-60 minutes | **Skill Level Achieved:** Intermediate-Advanced

---

*🎓 This enhanced lab transforms basic environment variable concepts into production-ready skills through hands-on practice, comprehensive verification, and real-world application patterns optimized for XFCE terminal environment.*
